#!/bin/bash -e

# Begin helper functions
function get_property()
{
  echo $(grep ^${1} ${DIR}/config.properties | cut -d"=" -f2)
}

function set_int_property()
{
  name=${1}
  min=${2}
  max=${3}
  default=${4}
  message=${5}

  if [[ "${min}" -eq "-1" ]]
  then
    min="â€“2147483648"
  fi
  if [[ "${max}" -eq "-1" ]]
  then
    max="2147483647"
  fi
  
  while read -p "${message} " int_value; do
    if [ -z "${int_value}" ]
    then
       echo "Using default of ${default}"
       int_value="${default}"
    fi

    if [[ "${int_value}" -lt ${min} || "${int_value}" -gt ${max} ]]
    then
      echo "${int_value} must be a number between ${min} and ${max} inclusive."
      continue
    fi
    break
  done
  echo "Setting ${name}=${int_value} in ${DIR}/config.properties..."
  sed -i '' -e "s/^${name}=.*$/${name}=${int_value}/g" ${DIR}/config.properties
}
# End helper functions

# Ensure git is installed
echo "Checking if git is installed..."
if ! command -v git
then
    echo "...git command does not exist. Install git and try again."
    exit 1
else
    echo "...git is installed"
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  TARGET="$(readlink "$SOURCE")"
  if [[ $TARGET == /* ]]; then
    SOURCE="$TARGET"
  else
    DIR="$( dirname "$SOURCE" )"
    SOURCE="$DIR/$TARGET"
  fi
done
RDIR="$( dirname "$SOURCE" )"
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

if [ -d "${DIR}/ssh" ]; then
    read -r -p "Delete and recreate directory ${DIR}/ssh? [Y/n] " input
    if [ "${input}foo" == "foo" ]
    then
        echo "Defaulting to \"Y\""
        input="Y"
    fi
    case $input in
        [yY][eE][sS]|[yY])
            echo "Removing ${DIR}/ssh..."
            rm -rf ${DIR}/ssh
        ;;
        [nN][oO]|[nN])
            echo "Skipping removal of ${DIR}/ssh..."
        ;;
        *)
            echo "Invalid input..."
            exit 1
        ;;
    esac
fi

# Create a config.properties file if it does not yet exist.
if [ ! -f "${DIR}/config.properties" ]
then
  echo "Creating config.properties..."
  cp ${DIR}/config.properties.template ${DIR}/config.properties
fi

echo "Creating ssh directory ${DIR}/ssh..."
mkdir -m 700 -p ${DIR}/ssh

echo "Generating RSA key pair..."
ssh-keygen -t rsa -N "" -f ${DIR}/ssh/id_rsa #-e -m pem

echo "Generating PEM file from RSA key pair..."
echo "Generating PEM file from RSA public key..."
ssh-keygen -f ${DIR}/ssh/id_rsa -e -m pem > ${DIR}/ssh/chaos.pem
echo "Securing PEM file before appending private key..."
chmod 600 ${DIR}/ssh/chaos.pem
echo "Appending RSA private key to PEM file..."
cat ${DIR}/ssh/id_rsa >> ${DIR}/ssh/chaos.pem

# Note: Associative arrays were introduced in bash 4.0
#       Mac uses a sub-4.0 version of bash :(. Therefore, we are required to use
#       an array and making assumptions about the URL.
SOURCES=($(grep ^repos ${DIR}/config.properties | grep \.url=  | cut -d"=" -f1 | cut -d"." -f2- | rev | cut -d"." -f2- | rev | tr "." "-"))

# Default username to empty string
github_username=""

echo "Ensuring all chaos source repos are present..."
for repo in "${SOURCES[@]}"
do
  echo "Checking if directory ${DIR}/${repo} exists..."
  if [[ ! -d "${DIR}/${repo}" ]]; then
    echo "Directory ${DIR}/${repo} does not exist."
    if [ "${github_username}foo" = "foo" ]
    then
      read -r -p "Please enter your github username: " github_username
    fi
    url="https://github.com/${github_username}/${repo}.git"
    read -r -p "Clone ${repo} project (${url})? [Y/n] " input
    if [ "${input}foo" == "foo" ]
    then
      echo "Defaulting to \"Y\""
      input="Y"
    fi
    case $input in
      [yY][eE][sS]|[yY])
        echo "Cloning the ${repo} repo..."
        git clone ${url} ${DIR}/${repo}
      ;;
      [nN][oO]|[nN])
        echo "Skipped git clone of ${repo} repo (${url})."
      ;;
      *)
        echo "Invalid input. Run setup again."
        exit 1
      ;;
    esac
  else
    echo "Directory ${DIR}/${repo} exists."
  fi
done

# Make sure client.count is set in config.properties
client_count=$(get_property 'client.count')
if [ "${client_count}" == "<CLIENTCOUNT>" ]
then
  message="How many client nodes should be created? (default: 1)"
  set_int_property "client.count" 1 5 1 "${message}"
fi

# Make sure validator.count is set in config.properties
validator_count=$(get_property 'validator.count')
if [ "${validator_count}" == "<VALIDATORCOUNT>" ]
then
  message="How many validator nodes should be created? (default: 4)"
  set_int_property "validator.count" 4 25 4 "${message}"
fi

echo ""
echo "Setup complete"
